//
// File generated by rootcint at Wed Feb 20 13:33:24 2002.
// Do NOT change. Changes will be lost next time file is generated
//

//Break the privacy of classes
#define private public
#define protected public
#include "EventDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {}; using namespace std;

#include "RtypesImp.h"

//______________________________________________________________________________
namespace ROOT {
void ShowMembers(EventHeader *obj, TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class EventHeader.

   TClass *R__cl  = R__tInit<EventHeader >::GetClass();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "fEvtNum", &obj->fEvtNum);
   R__insp.Inspect(R__cl, R__parent, "fRun", &obj->fRun);
   R__insp.Inspect(R__cl, R__parent, "fDate", &obj->fDate);
}

}

//______________________________________________________________________________
namespace ROOT {
void ShowMembers(Event *obj, TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class Event.

   TClass *R__cl  = R__tInit<Event >::GetClass();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "fType[20]", obj->fType);
   R__insp.Inspect(R__cl, R__parent, "*fEventName", &obj->fEventName);
   R__insp.Inspect(R__cl, R__parent, "fNtrack", &obj->fNtrack);
   R__insp.Inspect(R__cl, R__parent, "fNseg", &obj->fNseg);
   R__insp.Inspect(R__cl, R__parent, "fNvertex", &obj->fNvertex);
   R__insp.Inspect(R__cl, R__parent, "fFlag", &obj->fFlag);
   R__insp.Inspect(R__cl, R__parent, "fTemperature", &obj->fTemperature);
   R__insp.Inspect(R__cl, R__parent, "fMeasures[10]", obj->fMeasures);
   R__insp.Inspect(R__cl, R__parent, "fMatrix[4][4]", obj->fMatrix);
   R__insp.Inspect(R__cl, R__parent, "*fClosestDistance", &obj->fClosestDistance);
   R__insp.Inspect(R__cl, R__parent, "fEvtHdr", (void*)&obj->fEvtHdr);
   R__tInit<EventHeader >::ShowMembers(&obj->fEvtHdr, R__insp, strcat(R__parent,"fEvtHdr.")); R__parent[R__ncp] = 0;
   R__insp.Inspect(R__cl, R__parent, "*fTracks", &obj->fTracks);
   R__insp.Inspect(R__cl, R__parent, "*fHighPt", &obj->fHighPt);
   R__insp.Inspect(R__cl, R__parent, "*fMuons", &obj->fMuons);
   R__insp.Inspect(R__cl, R__parent, "fLastTrack", &obj->fLastTrack);
   obj->fLastTrack.ShowMembers(R__insp, strcat(R__parent,"fLastTrack.")); R__parent[R__ncp] = 0;
   R__insp.Inspect(R__cl, R__parent, "fWebHistogram", &obj->fWebHistogram);
   obj->fWebHistogram.ShowMembers(R__insp, strcat(R__parent,"fWebHistogram.")); R__parent[R__ncp] = 0;
   R__insp.Inspect(R__cl, R__parent, "*fH", &obj->fH);
}

}

//______________________________________________________________________________
void R__HistogramManager_fNtrack(TBuffer &R__b, void *R__p, int)
{
   TH1F** fNtrack = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fNtrack;
   } else {
      R__b << (TObject*)*fNtrack;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fNseg(TBuffer &R__b, void *R__p, int)
{
   TH1F** fNseg = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fNseg;
   } else {
      R__b << (TObject*)*fNseg;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fTemperature(TBuffer &R__b, void *R__p, int)
{
   TH1F** fTemperature = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fTemperature;
   } else {
      R__b << (TObject*)*fTemperature;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fPx(TBuffer &R__b, void *R__p, int)
{
   TH1F** fPx = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fPx;
   } else {
      R__b << (TObject*)*fPx;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fPy(TBuffer &R__b, void *R__p, int)
{
   TH1F** fPy = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fPy;
   } else {
      R__b << (TObject*)*fPy;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fPz(TBuffer &R__b, void *R__p, int)
{
   TH1F** fPz = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fPz;
   } else {
      R__b << (TObject*)*fPz;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fRandom(TBuffer &R__b, void *R__p, int)
{
   TH1F** fRandom = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fRandom;
   } else {
      R__b << (TObject*)*fRandom;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fMass2(TBuffer &R__b, void *R__p, int)
{
   TH1F** fMass2 = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fMass2;
   } else {
      R__b << (TObject*)*fMass2;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fBx(TBuffer &R__b, void *R__p, int)
{
   TH1F** fBx = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fBx;
   } else {
      R__b << (TObject*)*fBx;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fBy(TBuffer &R__b, void *R__p, int)
{
   TH1F** fBy = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fBy;
   } else {
      R__b << (TObject*)*fBy;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fMeanCharge(TBuffer &R__b, void *R__p, int)
{
   TH1F** fMeanCharge = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fMeanCharge;
   } else {
      R__b << (TObject*)*fMeanCharge;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fXfirst(TBuffer &R__b, void *R__p, int)
{
   TH1F** fXfirst = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fXfirst;
   } else {
      R__b << (TObject*)*fXfirst;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fXlast(TBuffer &R__b, void *R__p, int)
{
   TH1F** fXlast = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fXlast;
   } else {
      R__b << (TObject*)*fXlast;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fYfirst(TBuffer &R__b, void *R__p, int)
{
   TH1F** fYfirst = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fYfirst;
   } else {
      R__b << (TObject*)*fYfirst;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fYlast(TBuffer &R__b, void *R__p, int)
{
   TH1F** fYlast = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fYlast;
   } else {
      R__b << (TObject*)*fYlast;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fZfirst(TBuffer &R__b, void *R__p, int)
{
   TH1F** fZfirst = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fZfirst;
   } else {
      R__b << (TObject*)*fZfirst;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fZlast(TBuffer &R__b, void *R__p, int)
{
   TH1F** fZlast = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fZlast;
   } else {
      R__b << (TObject*)*fZlast;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fCharge(TBuffer &R__b, void *R__p, int)
{
   TH1F** fCharge = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fCharge;
   } else {
      R__b << (TObject*)*fCharge;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fNpoint(TBuffer &R__b, void *R__p, int)
{
   TH1F** fNpoint = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fNpoint;
   } else {
      R__b << (TObject*)*fNpoint;
   }
}

//______________________________________________________________________________
void R__HistogramManager_fValid(TBuffer &R__b, void *R__p, int)
{
   TH1F** fValid = (TH1F**)R__p;
   if (R__b.IsReading()) {
      R__b >> *fValid;
   } else {
      R__b << (TObject*)*fValid;
   }
}

//______________________________________________________________________________
void HistogramManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class HistogramManager.

   if (R__b.IsReading()) {
      HistogramManager::Class()->ReadBuffer(R__b, this);
   } else {
      HistogramManager::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
namespace ROOT {
void ShowMembers(HistogramManager *obj, TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class HistogramManager.

   TClass *R__cl  = R__tInit<HistogramManager >::GetClass();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "*fNtrack", &obj->fNtrack);
   R__cl->SetStreamer("*fNtrack",R__HistogramManager_fNtrack);
   R__insp.Inspect(R__cl, R__parent, "*fNseg", &obj->fNseg);
   R__cl->SetStreamer("*fNseg",R__HistogramManager_fNseg);
   R__insp.Inspect(R__cl, R__parent, "*fTemperature", &obj->fTemperature);
   R__cl->SetStreamer("*fTemperature",R__HistogramManager_fTemperature);
   R__insp.Inspect(R__cl, R__parent, "*fPx", &obj->fPx);
   R__cl->SetStreamer("*fPx",R__HistogramManager_fPx);
   R__insp.Inspect(R__cl, R__parent, "*fPy", &obj->fPy);
   R__cl->SetStreamer("*fPy",R__HistogramManager_fPy);
   R__insp.Inspect(R__cl, R__parent, "*fPz", &obj->fPz);
   R__cl->SetStreamer("*fPz",R__HistogramManager_fPz);
   R__insp.Inspect(R__cl, R__parent, "*fRandom", &obj->fRandom);
   R__cl->SetStreamer("*fRandom",R__HistogramManager_fRandom);
   R__insp.Inspect(R__cl, R__parent, "*fMass2", &obj->fMass2);
   R__cl->SetStreamer("*fMass2",R__HistogramManager_fMass2);
   R__insp.Inspect(R__cl, R__parent, "*fBx", &obj->fBx);
   R__cl->SetStreamer("*fBx",R__HistogramManager_fBx);
   R__insp.Inspect(R__cl, R__parent, "*fBy", &obj->fBy);
   R__cl->SetStreamer("*fBy",R__HistogramManager_fBy);
   R__insp.Inspect(R__cl, R__parent, "*fMeanCharge", &obj->fMeanCharge);
   R__cl->SetStreamer("*fMeanCharge",R__HistogramManager_fMeanCharge);
   R__insp.Inspect(R__cl, R__parent, "*fXfirst", &obj->fXfirst);
   R__cl->SetStreamer("*fXfirst",R__HistogramManager_fXfirst);
   R__insp.Inspect(R__cl, R__parent, "*fXlast", &obj->fXlast);
   R__cl->SetStreamer("*fXlast",R__HistogramManager_fXlast);
   R__insp.Inspect(R__cl, R__parent, "*fYfirst", &obj->fYfirst);
   R__cl->SetStreamer("*fYfirst",R__HistogramManager_fYfirst);
   R__insp.Inspect(R__cl, R__parent, "*fYlast", &obj->fYlast);
   R__cl->SetStreamer("*fYlast",R__HistogramManager_fYlast);
   R__insp.Inspect(R__cl, R__parent, "*fZfirst", &obj->fZfirst);
   R__cl->SetStreamer("*fZfirst",R__HistogramManager_fZfirst);
   R__insp.Inspect(R__cl, R__parent, "*fZlast", &obj->fZlast);
   R__cl->SetStreamer("*fZlast",R__HistogramManager_fZlast);
   R__insp.Inspect(R__cl, R__parent, "*fCharge", &obj->fCharge);
   R__cl->SetStreamer("*fCharge",R__HistogramManager_fCharge);
   R__insp.Inspect(R__cl, R__parent, "*fNpoint", &obj->fNpoint);
   R__cl->SetStreamer("*fNpoint",R__HistogramManager_fNpoint);
   R__insp.Inspect(R__cl, R__parent, "*fValid", &obj->fValid);
   R__cl->SetStreamer("*fValid",R__HistogramManager_fValid);
}

}

void HistogramManager::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   ROOT::ShowMembers(this, R__insp, R__parent);
}

//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class Track.

   if (R__b.IsReading()) {
      Track::Class()->ReadBuffer(R__b, this);
   } else {
      Track::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
namespace ROOT {
void ShowMembers(Track *obj, TMemberInspector &R__insp, char *R__parent)
{
   // Inspect the data members of an object of class Track.

   TClass *R__cl  = R__tInit<Track >::GetClass();
   Int_t   R__ncp = strlen(R__parent);
   if (R__ncp || R__cl || R__insp.IsA()) { }
   R__insp.Inspect(R__cl, R__parent, "fPx", &obj->fPx);
   R__insp.Inspect(R__cl, R__parent, "fPy", &obj->fPy);
   R__insp.Inspect(R__cl, R__parent, "fPz", &obj->fPz);
   R__insp.Inspect(R__cl, R__parent, "fRandom", &obj->fRandom);
   R__insp.Inspect(R__cl, R__parent, "fMass2", &obj->fMass2);
   R__insp.Inspect(R__cl, R__parent, "fBx", &obj->fBx);
   R__insp.Inspect(R__cl, R__parent, "fBy", &obj->fBy);
   R__insp.Inspect(R__cl, R__parent, "fMeanCharge", &obj->fMeanCharge);
   R__insp.Inspect(R__cl, R__parent, "fXfirst", &obj->fXfirst);
   R__insp.Inspect(R__cl, R__parent, "fXlast", &obj->fXlast);
   R__insp.Inspect(R__cl, R__parent, "fYfirst", &obj->fYfirst);
   R__insp.Inspect(R__cl, R__parent, "fYlast", &obj->fYlast);
   R__insp.Inspect(R__cl, R__parent, "fZfirst", &obj->fZfirst);
   R__insp.Inspect(R__cl, R__parent, "fZlast", &obj->fZlast);
   R__insp.Inspect(R__cl, R__parent, "fCharge", &obj->fCharge);
   R__insp.Inspect(R__cl, R__parent, "fVertex[3]", obj->fVertex);
   R__insp.Inspect(R__cl, R__parent, "fNpoint", &obj->fNpoint);
   R__insp.Inspect(R__cl, R__parent, "fValid", &obj->fValid);
   obj->TObject::ShowMembers(R__insp, R__parent);
}

}

void Track::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   ROOT::ShowMembers(this, R__insp, R__parent);
}

//______________________________________________________________________________
// Static variable to hold class pointer
TClass *Track::fgIsA = 0;

//______________________________________________________________________________
const char *Track::Class_Name()
{
   // Return the class name for Track.
   return "Track";
}

//______________________________________________________________________________
const char* Track::ImplFileName()
{
   return R__tInit< Track >::GetImplFileName();
}

//______________________________________________________________________________
int   Track::ImplFileLine()
{
   return R__tInit< Track >::GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = R__tInit<Track >::GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) fgIsA = R__tInit<Track >::GetClass();
   return fgIsA;
}

// Static variable to hold initialization object
static R__tInit< Track > __gR__InitTrack("Track",Track::Class_Version(),"Event.h",22,&ROOT::ShowMembers,4);

// Static variable to hold initialization object
static R__tInit< EventHeader > __gR__InitEventHeader("EventHeader","Event.h",72,&ROOT::ShowMembers,4);

// Static variable to hold initialization object
static R__tInit< Event > __gR__InitEvent("Event","Event.h",91,&ROOT::ShowMembers,4);

//______________________________________________________________________________
// Static variable to hold class pointer
TClass *HistogramManager::fgIsA = 0;

//______________________________________________________________________________
const char *HistogramManager::Class_Name()
{
   // Return the class name for HistogramManager.
   return "HistogramManager";
}

//______________________________________________________________________________
const char* HistogramManager::ImplFileName()
{
   return R__tInit< HistogramManager >::GetImplFileName();
}

//______________________________________________________________________________
int   HistogramManager::ImplFileLine()
{
   return R__tInit< HistogramManager >::GetImplFileLine();
}

//______________________________________________________________________________
void HistogramManager::Dictionary()
{
   fgIsA = R__tInit<HistogramManager >::GetClass();
}

//______________________________________________________________________________
TClass *HistogramManager::Class()
{
   if (!fgIsA) fgIsA = R__tInit<HistogramManager >::GetClass();
   return fgIsA;
}

// Static variable to hold initialization object
static R__tInit< HistogramManager > __gR__InitHistogramManager("HistogramManager",HistogramManager::Class_Version(),"Event.h",156,&ROOT::ShowMembers,4);

/********************************************************
* EventDict.cxx
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableEventDict();

extern "C" void G__set_cpp_environmentEventDict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Event.h");
  G__cpp_reset_tagtableEventDict();
}
class G__EventDictdOcxx_tag {};

void* operator new(size_t size,G__EventDictdOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__EventDictdOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_EventDictdOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevEventDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Track */
static int G__Track_Track_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Track *p=NULL;
   if(G__getaryconstruct()) p=new Track[G__getaryconstruct()];
   else                    p=new Track;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_Track);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_Track_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Track *p=NULL;
      p = new Track((Float_t)G__double(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_Track);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetPx_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetPy_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetPz_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetPt_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetRandom_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetRandom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetBx_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetBx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetBy_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetBy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetMass2_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetMass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetMeanCharge_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetMeanCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetXfirst_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetXfirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetXlast_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetXlast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetYfirst_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetYfirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetYlast_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetYlast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetZfirst_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetZfirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetZlast_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetZlast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetCharge_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Track*)(G__getstructoffset()))->GetCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetVertex_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__letdouble(result7,102,(double)((Track*)(G__getstructoffset()))->GetVertex((Int_t)G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7,102,(double)((Track*)(G__getstructoffset()))->GetVertex());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetNpoint_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const Track*)(G__getstructoffset()))->GetNpoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_GetValid_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((const Track*)(G__getstructoffset()))->GetValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_SetValid_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((Track*)(G__getstructoffset()))->SetValid((Int_t)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((Track*)(G__getstructoffset()))->SetValid();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_Class_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((Track*)(G__getstructoffset()))->Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_Class_Name_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Track*)(G__getstructoffset()))->Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_Class_Version_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((Track*)(G__getstructoffset()))->Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_Dictionary_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Track*)(G__getstructoffset()))->Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_IsA_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Track*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_ShowMembers_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Track*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_Streamer_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Track*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_StreamerNVirtual_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Track*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_DeclFileName_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Track*)(G__getstructoffset()))->DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_DeclFileLine_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Track*)(G__getstructoffset()))->DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_ImplFileName_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Track*)(G__getstructoffset()))->ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Track_ImplFileLine_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Track*)(G__getstructoffset()))->ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Track_Track_5_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Track *p;
   p=new Track(*(Track*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_Track);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__Track_wATrack_6_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Track *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (Track *)((G__getstructoffset())+sizeof(Track)*i);
   else  delete (Track *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EventHeader */
static int G__EventHeader_EventHeader_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   EventHeader *p=NULL;
   if(G__getaryconstruct()) p=new EventHeader[G__getaryconstruct()];
   else p=::new((G__EventDictdOcxx_tag*)G__getgvp()) EventHeader;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_EventHeader);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventHeader_Set_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((EventHeader*)(G__getstructoffset()))->Set((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventHeader_GetEvtNum_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const EventHeader*)(G__getstructoffset()))->GetEvtNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventHeader_GetRun_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const EventHeader*)(G__getstructoffset()))->GetRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EventHeader_GetDate_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const EventHeader*)(G__getstructoffset()))->GetDate());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EventHeader_EventHeader_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   EventHeader *p;
   p=new EventHeader(*(EventHeader*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_EventHeader);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EventHeader G__TEventHeader;
static int G__EventHeader_wAEventHeader_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (EventHeader *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((EventHeader *)((G__getstructoffset())+sizeof(EventHeader)*i))->~G__TEventHeader();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((EventHeader *)(G__getstructoffset()))->~G__TEventHeader();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Event */
static int G__Event_Event_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Event *p=NULL;
   if(G__getaryconstruct()) p=new Event[G__getaryconstruct()];
   else p=::new((G__EventDictdOcxx_tag*)G__getgvp()) Event;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_Event);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_Build_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 3:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Build((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Float_t)G__double(libp->para[2]));
      break;
   case 2:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Build((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1]));
      break;
   case 1:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Build((Int_t)G__int(libp->para[0]));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_Clear_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Clear((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Clear();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_Reset_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Reset((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->Reset();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_ResetHistogramPointer_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->ResetHistogramPointer();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetNseg_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetNseg((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetNtrack_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetNtrack((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetNvertex_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetNvertex((Int_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetFlag_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetFlag((UInt_t)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetTemperature_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetTemperature((Float_t)G__double(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetType_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetType((char*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetHeader_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetHeader((Int_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1])
,(Int_t)G__int(libp->para[2]),(Float_t)G__double(libp->para[3]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_AddTrack_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 2:
      G__letint(result7,85,(long)((Event*)(G__getstructoffset()))->AddTrack((Float_t)G__double(libp->para[0]),(Float_t)G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7,85,(long)((Event*)(G__getstructoffset()))->AddTrack((Float_t)G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetMeasure_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetMeasure((UChar_t)G__int(libp->para[0]),(Int_t)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetMatrix_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetMatrix((UChar_t)G__int(libp->para[0]),(UChar_t)G__int(libp->para[1])
,(Float_t)G__double(libp->para[2]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_SetRandomVertex_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Event*)(G__getstructoffset()))->SetRandomVertex();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetClosestDistance_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((Event*)(G__getstructoffset()))->GetClosestDistance((Int_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetType_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Event*)(G__getstructoffset()))->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetNtrack_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const Event*)(G__getstructoffset()))->GetNtrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetNseg_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const Event*)(G__getstructoffset()))->GetNseg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetNvertex_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((const Event*)(G__getstructoffset()))->GetNvertex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetFlag_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const Event*)(G__getstructoffset()))->GetFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetTemperature_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((const Event*)(G__getstructoffset()))->GetTemperature());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetHeader_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((Event*)(G__getstructoffset()))->GetHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetTracks_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Event*)(G__getstructoffset()))->GetTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetHighPt_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Event*)(G__getstructoffset()))->GetHighPt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetMuons_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Event*)(G__getstructoffset()))->GetMuons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetLastTrack_8_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Event*)(G__getstructoffset()))->GetLastTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetHistogram_9_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Event*)(G__getstructoffset()))->GetHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetWebHistogram_0_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Event*)(G__getstructoffset()))->GetWebHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetMeasure_1_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Event*)(G__getstructoffset()))->GetMeasure((UChar_t)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Event_GetMatrix_2_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letdouble(result7,102,(double)((Event*)(G__getstructoffset()))->GetMatrix((UChar_t)G__int(libp->para[0]),(UChar_t)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Event_Event_3_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Event *p;
   p=new Event(*(Event*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_Event);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__Event_wAEvent_4_3(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Event *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((Event *)((G__getstructoffset())+sizeof(Event)*i))->~G__TEvent();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((Event *)(G__getstructoffset()))->~G__TEvent();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HistogramManager */
static int G__HistogramManager_HistogramManager_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   HistogramManager *p=NULL;
      p=::new((G__EventDictdOcxx_tag*)G__getgvp()) HistogramManager((TDirectory*)G__int(libp->para[0]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_HistogramManager);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_Hfill_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((HistogramManager*)(G__getstructoffset()))->Hfill((Event*)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_Class_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((HistogramManager*)(G__getstructoffset()))->Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_Class_Name_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((HistogramManager*)(G__getstructoffset()))->Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_Class_Version_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((HistogramManager*)(G__getstructoffset()))->Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_Dictionary_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((HistogramManager*)(G__getstructoffset()))->Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_IsA_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const HistogramManager*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_ShowMembers_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((HistogramManager*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_Streamer_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((HistogramManager*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_StreamerNVirtual_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((HistogramManager*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_DeclFileName_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((HistogramManager*)(G__getstructoffset()))->DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_DeclFileLine_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((HistogramManager*)(G__getstructoffset()))->DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_ImplFileName_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((HistogramManager*)(G__getstructoffset()))->ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HistogramManager_ImplFileLine_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((HistogramManager*)(G__getstructoffset()))->ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HistogramManager_HistogramManager_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   HistogramManager *p;
   p=new HistogramManager(*(HistogramManager*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__EventDictLN_HistogramManager);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HistogramManager G__THistogramManager;
static int G__HistogramManager_wAHistogramManager_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (HistogramManager *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((HistogramManager *)((G__getstructoffset())+sizeof(HistogramManager)*i))->~G__THistogramManager();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((HistogramManager *)(G__getstructoffset()))->~G__THistogramManager();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Track */

/* EventHeader */

/* Event */

/* HistogramManager */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEventDict {
 public:
  G__Sizep2memfuncEventDict() {p=&G__Sizep2memfuncEventDict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEventDict::*p)();
};

size_t G__get_sizep2memfuncEventDict()
{
  G__Sizep2memfuncEventDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEventDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EventDictLN_Track))) {
     Track *G__Lderived;
     G__Lderived=(Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EventDictLN_Track),G__get_linked_tagnum(&G__EventDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEventDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Seek_t",105,-1,0,
-1);
   G__setnewtype(-1,"File pointer (int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Float 8 bytes (double)",0);
   G__search_typename2("Text_t",99,-1,0,
-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",98,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (unsigned char)",0);
   G__search_typename2("Byte_t",98,-1,0,
-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,0,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Ssiz_t",105,-1,0,
-1);
   G__setnewtype(-1,"String size (int)",0);
   G__search_typename2("Real_t",102,-1,0,
-1);
   G__setnewtype(-1,"TVector and TMatrix element type (float)",0);
   G__search_typename2("Streamer_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VoidFuncPtr_t",89,-1,0,
-1);
   G__setnewtype(-1,"pointer to void function",0);
   G__search_typename2("ShowMembersFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("IsAFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FreeHookFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocCFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Axis_t",100,-1,0,
-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Stat_t",100,-1,0,
-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("map<const type_info*,TClass*>",117,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Id$",0);
   G__search_typename2("key_type",85,G__get_linked_tagnum(&G__EventDictLN_type_info),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",85,G__get_linked_tagnum(&G__EventDictLN_TClass),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__EventDictLN_pairlEconstsPtype_infomUcOTClassmUgR),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__EventDictLN_lesslEconstsPtype_infomUgR),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__EventDictLN___malloc_alloc_templatelE0gR),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("bidirectional_iterator<TClass*,difference_type>",117,G__get_linked_tagnum(&G__EventDictLN_bidirectional_iteratorlETClassmUcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Id$",0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgRcLcLiterator),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ShowMembersFunc_t",89,-1,0,
G__get_linked_tagnum(&G__EventDictLN_TClass));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Func_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Font_t",115,-1,0,
-1);
   G__setnewtype(-1,"Font number (short)",0);
   G__search_typename2("Style_t",115,-1,0,
-1);
   G__setnewtype(-1,"Style number (short)",0);
   G__search_typename2("Marker_t",115,-1,0,
-1);
   G__setnewtype(-1,"Marker number (short)",0);
   G__search_typename2("Width_t",115,-1,0,
-1);
   G__setnewtype(-1,"Line width (short)",0);
   G__search_typename2("Color_t",115,-1,0,
-1);
   G__setnewtype(-1,"Color number (short)",0);
   G__search_typename2("SCoord_t",115,-1,0,
-1);
   G__setnewtype(-1,"Screen coordinates (short)",0);
   G__search_typename2("Coord_t",100,-1,0,
-1);
   G__setnewtype(-1,"Pad world coordinates (double)",0);
   G__search_typename2("Angle_t",102,-1,0,
-1);
   G__setnewtype(-1,"Graphics angle (float)",0);
   G__search_typename2("Size_t",102,-1,0,
-1);
   G__setnewtype(-1,"Attribute size (float)",0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPx=",0,"X component of the momentum");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPy=",0,"Y component of the momentum");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPz=",0,"Z component of the momentum");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRandom=",0,"A random track quantity");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMass2=",0,"The mass square of this particle");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBx=",0,"X intercept at the vertex");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBy=",0,"Y intercept at the vertex");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanCharge=",0,"Mean charge deposition of all hits of this track");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXfirst=",0,"X coordinate of the first point");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXlast=",0,"X coordinate of the last point");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYfirst=",0,"Y coordinate of the first point");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYlast=",0,"Y coordinate of the last point");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZfirst=",0,"Z coordinate of the first point");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZlast=",0,"Z coordinate of the last point");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,"Charge of this track");
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVertex[3]=",0,"Track vertex position");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNpoint=",0,"Number of points for this track");
   G__memvar_setup((void*)NULL,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fValid=",0,"Validity criterion");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EventHeader */
static void G__setup_memvarEventHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_EventHeader));
   { EventHeader *p; p=(EventHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvtNum=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRun=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDate=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,99,0,0,-1,-1,-1,4,"fType[20]=",0,"event type");
   G__memvar_setup((void*)NULL,67,0,0,-1,-1,-1,4,"fEventName=",0,"run+event number in character format");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtrack=",0,"Number of tracks");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNseg=",0,"Number of track segments");
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNvertex=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFlag=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTemperature=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMeasures[10]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMatrix[4][4]=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"fClosestDistance=",0,"[fNvertex]");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__EventDictLN_EventHeader),-1,-1,4,"fEvtHdr=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClonesArray),-1,-1,4,"fTracks=",0,"->array with all tracks");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TRefArray),-1,-1,4,"fHighPt=",0,"array of High Pt tracks only");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TRefArray),-1,-1,4,"fMuons=",0,"array of Muon tracks only");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__EventDictLN_TRef),-1,-1,4,"fLastTrack=",0,"reference pointer to last track");
   G__memvar_setup((void*)NULL,117,0,0,G__get_linked_tagnum(&G__EventDictLN_TRef),-1,-1,4,"fWebHistogram=",0,"EXEC:GetWebHistogram reference to an histogram in a TWebFile");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fH=",0,"->");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClonesArray),-1,-2,4,"fgTracks=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-2,4,"fgHist=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HistogramManager */
static void G__setup_memvarHistogramManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EventDictLN_HistogramManager));
   { HistogramManager *p; p=(HistogramManager*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fNtrack=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fNseg=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fTemperature=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fPx=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fPy=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fPz=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fRandom=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fMass2=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fBx=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fBy=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fMeanCharge=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fXfirst=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fXlast=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fYfirst=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fYlast=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fZfirst=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fZlast=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fNpoint=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,-1,4,"fValid=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEventDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_Track));
   G__memfunc_setup("Track",501,G__Track_Track_0_0,105,G__get_linked_tagnum(&G__EventDictLN_Track),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Track",501,G__Track_Track_1_0,105,G__get_linked_tagnum(&G__EventDictLN_Track),-1,0,1,1,1,0,"f - 'Float_t' 0 - random",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPx",488,G__Track_GetPx_3_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPy",489,G__Track_GetPy_4_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPz",490,G__Track_GetPz_5_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetPt",484,G__Track_GetPt_6_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetRandom",897,G__Track_GetRandom_7_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBx",474,G__Track_GetBx_8_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetBy",475,G__Track_GetBy_9_0,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMass2",742,G__Track_GetMass2_0_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMeanCharge",1259,G__Track_GetMeanCharge_1_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetXfirst",928,G__Track_GetXfirst_2_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetXlast",812,G__Track_GetXlast_3_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetYfirst",929,G__Track_GetYfirst_4_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetYlast",813,G__Track_GetYlast_5_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetZfirst",930,G__Track_GetZfirst_6_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetZlast",814,G__Track_GetZlast_7_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetCharge",874,G__Track_GetCharge_8_1,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetVertex",926,G__Track_GetVertex_9_1,102,-1,G__defined_typename("Float_t"),0,1,1,1,0,"i - 'Int_t' 0 0 i",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNpoint",920,G__Track_GetNpoint_0_2,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetValid",784,G__Track_GetValid_1_2,115,-1,G__defined_typename("Short_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetValid",796,G__Track_SetValid_2_2,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 1 valid",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__Track_Class_3_2,85,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__Track_Class_Name_4_2,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__Track_Class_Version_5_2,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__Track_Dictionary_6_2,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__Track_IsA_7_2,85,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__Track_ShowMembers_8_2,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__Track_Streamer_9_2,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Track_StreamerNVirtual_0_3,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__Track_DeclFileName_1_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__Track_DeclFileLine_2_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__Track_ImplFileName_3_3,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__Track_ImplFileLine_4_3,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("Track",501,G__Track_Track_5_3,(int)('i'),G__get_linked_tagnum(&G__EventDictLN_Track),-1,0,1,1,1,0,"u 'Track' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Track",627,G__Track_wATrack_6_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEventHeader(void) {
   /* EventHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_EventHeader));
   G__memfunc_setup("EventHeader",1099,G__EventHeader_EventHeader_0_0,105,G__get_linked_tagnum(&G__EventDictLN_EventHeader),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Set",300,G__EventHeader_Set_2_0,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - i i - 'Int_t' 0 - r "
"i - 'Int_t' 0 - d",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetEvtNum",895,G__EventHeader_GetEvtNum_3_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetRun",597,G__EventHeader_GetRun_4_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetDate",670,G__EventHeader_GetDate_5_0,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("EventHeader",1099,G__EventHeader_EventHeader_6_0,(int)('i'),G__get_linked_tagnum(&G__EventDictLN_EventHeader),-1,0,1,1,1,0,"u 'EventHeader' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~EventHeader",1225,G__EventHeader_wAEventHeader_7_0,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_Event));
   G__memfunc_setup("Event",514,G__Event_Event_0_0,105,G__get_linked_tagnum(&G__EventDictLN_Event),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Build",496,G__Event_Build_2_0,121,-1,-1,0,3,1,1,0,
"i - 'Int_t' 0 - ev i - 'Int_t' 0 600 arg5 "
"f - 'Float_t' 0 1 ptmin",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Clear",487,G__Event_Clear_3_0,121,-1,-1,0,1,1,1,0,"C - 'Option_t' 0 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Reset",515,G__Event_Reset_4_0,121,-1,-1,0,1,3,1,0,"C - 'Option_t' 0 \"\" option",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ResetHistogramPointer",2194,G__Event_ResetHistogramPointer_5_0,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetNseg",697,G__Event_SetNseg_6_0,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetNtrack",911,G__Event_SetNtrack_7_0,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetNvertex",1048,G__Event_SetNvertex_8_0,121,-1,-1,0,1,1,1,0,"i - 'Int_t' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetFlag",678,G__Event_SetFlag_9_0,121,-1,-1,0,1,1,1,0,"h - 'UInt_t' 0 - f",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetTemperature",1466,G__Event_SetTemperature_0_1,121,-1,-1,0,1,1,1,0,"f - 'Float_t' 0 - t",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetType",718,G__Event_SetType_1_1,121,-1,-1,0,1,1,1,0,"C - - 0 - type",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetHeader",885,G__Event_SetHeader_2_1,121,-1,-1,0,4,1,1,0,
"i - 'Int_t' 0 - i i - 'Int_t' 0 - run "
"i - 'Int_t' 0 - date f - 'Float_t' 0 - random",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("AddTrack",766,G__Event_AddTrack_3_1,85,G__get_linked_tagnum(&G__EventDictLN_Track),-1,0,2,1,1,0,
"f - 'Float_t' 0 - random f - 'Float_t' 0 1 ptmin",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetMeasure",1022,G__Event_SetMeasure_4_1,121,-1,-1,0,2,1,1,0,
"b - 'UChar_t' 0 - which i - 'Int_t' 0 - what",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetMatrix",929,G__Event_SetMatrix_5_1,121,-1,-1,0,3,1,1,0,
"b - 'UChar_t' 0 - x b - 'UChar_t' 0 - y "
"f - 'Float_t' 0 - what",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("SetRandomVertex",1547,G__Event_SetRandomVertex_6_1,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetClosestDistance",1832,G__Event_GetClosestDistance_7_1,102,-1,G__defined_typename("Float_t"),0,1,1,1,0,"i - 'Int_t' 0 - i",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetType",706,G__Event_GetType_8_1,67,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNtrack",899,G__Event_GetNtrack_9_1,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNseg",685,G__Event_GetNseg_0_2,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetNvertex",1036,G__Event_GetNvertex_1_2,105,-1,G__defined_typename("Int_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetFlag",666,G__Event_GetFlag_2_2,104,-1,G__defined_typename("UInt_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTemperature",1454,G__Event_GetTemperature_3_2,102,-1,G__defined_typename("Float_t"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetHeader",873,G__Event_GetHeader_4_2,85,G__get_linked_tagnum(&G__EventDictLN_EventHeader),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetTracks",904,G__Event_GetTracks_5_2,85,G__get_linked_tagnum(&G__EventDictLN_TClonesArray),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetHighPt",868,G__Event_GetHighPt_6_2,85,G__get_linked_tagnum(&G__EventDictLN_TRefArray),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMuons",818,G__Event_GetMuons_7_2,85,G__get_linked_tagnum(&G__EventDictLN_TRefArray),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetLastTrack",1193,G__Event_GetLastTrack_8_2,85,G__get_linked_tagnum(&G__EventDictLN_Track),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetHistogram",1230,G__Event_GetHistogram_9_2,85,G__get_linked_tagnum(&G__EventDictLN_TH1F),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetWebHistogram",1516,G__Event_GetWebHistogram_0_3,85,G__get_linked_tagnum(&G__EventDictLN_TH1),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMeasure",1010,G__Event_GetMeasure_1_3,105,-1,G__defined_typename("Int_t"),0,1,1,1,0,"b - 'UChar_t' 0 - which",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("GetMatrix",917,G__Event_GetMatrix_2_3,102,-1,G__defined_typename("Float_t"),0,2,1,1,0,
"b - 'UChar_t' 0 - x b - 'UChar_t' 0 - y",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("Event",514,G__Event_Event_3_3,(int)('i'),G__get_linked_tagnum(&G__EventDictLN_Event),-1,0,1,1,1,0,"u 'Event' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Event",640,G__Event_wAEvent_4_3,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHistogramManager(void) {
   /* HistogramManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EventDictLN_HistogramManager));
   G__memfunc_setup("HistogramManager",1641,G__HistogramManager_HistogramManager_0_0,105,G__get_linked_tagnum(&G__EventDictLN_HistogramManager),-1,0,1,1,1,0,"U 'TDirectory' - 0 - dir",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Hfill",495,G__HistogramManager_Hfill_2_0,121,-1,-1,0,1,1,1,0,"U 'Event' - 0 - event",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__HistogramManager_Class_3_0,85,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__HistogramManager_Class_Name_4_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__HistogramManager_Class_Version_5_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__HistogramManager_Dictionary_6_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__HistogramManager_IsA_7_0,85,G__get_linked_tagnum(&G__EventDictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__HistogramManager_ShowMembers_8_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__HistogramManager_Streamer_9_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HistogramManager_StreamerNVirtual_0_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__HistogramManager_DeclFileName_1_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__HistogramManager_DeclFileLine_2_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__HistogramManager_ImplFileName_3_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__HistogramManager_ImplFileLine_4_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("HistogramManager",1641,G__HistogramManager_HistogramManager_5_1,(int)('i'),G__get_linked_tagnum(&G__EventDictLN_HistogramManager),-1,0,1,1,1,0,"u 'HistogramManager' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~HistogramManager",1767,G__HistogramManager_wAHistogramManager_6_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEventDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEventDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEventDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EventDictLN_type_info = { "type_info" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EventDictLN___malloc_alloc_templatelE0gR = { "__malloc_alloc_template<0>" , 99 , -1 };
G__linked_taginfo G__EventDictLN_lesslEconstsPtype_infomUgR = { "less<const type_info*>" , 115 , -1 };
G__linked_taginfo G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR = { "map<const type_info*,TClass*,less<const type_info*>,__malloc_alloc_template<0> >" , 99 , -1 };
G__linked_taginfo G__EventDictLN_pairlEconstsPtype_infomUcOTClassmUgR = { "pair<const type_info*,TClass*>" , 115 , -1 };
G__linked_taginfo G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgRcLcLiterator = { "map<const type_info*,TClass*,less<const type_info*>,__malloc_alloc_template<0> >::iterator" , 99 , -1 };
G__linked_taginfo G__EventDictLN_bidirectional_iteratorlETClassmUcOlonggR = { "bidirectional_iterator<TClass*,long>" , 115 , -1 };
G__linked_taginfo G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgRcLcLreverse_iterator = { "map<const type_info*,TClass*,less<const type_info*>,__malloc_alloc_template<0> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__EventDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__EventDictLN_Track = { "Track" , 99 , -1 };
G__linked_taginfo G__EventDictLN_EventHeader = { "EventHeader" , 99 , -1 };
G__linked_taginfo G__EventDictLN_Event = { "Event" , 99 , -1 };
G__linked_taginfo G__EventDictLN_HistogramManager = { "HistogramManager" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEventDict() {
  G__EventDictLN_type_info.tagnum = -1 ;
  G__EventDictLN_TClass.tagnum = -1 ;
  G__EventDictLN_TObject.tagnum = -1 ;
  G__EventDictLN___malloc_alloc_templatelE0gR.tagnum = -1 ;
  G__EventDictLN_lesslEconstsPtype_infomUgR.tagnum = -1 ;
  G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgR.tagnum = -1 ;
  G__EventDictLN_pairlEconstsPtype_infomUcOTClassmUgR.tagnum = -1 ;
  G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgRcLcLiterator.tagnum = -1 ;
  G__EventDictLN_bidirectional_iteratorlETClassmUcOlonggR.tagnum = -1 ;
  G__EventDictLN_maplEconstsPtype_infomUcOTClassmUcOlesslEconstsPtype_infomUgRcO__malloc_alloc_templatelE0gRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__EventDictLN_TClonesArray.tagnum = -1 ;
  G__EventDictLN_TRefArray.tagnum = -1 ;
  G__EventDictLN_TRef.tagnum = -1 ;
  G__EventDictLN_TH1.tagnum = -1 ;
  G__EventDictLN_TH1F.tagnum = -1 ;
  G__EventDictLN_Track.tagnum = -1 ;
  G__EventDictLN_EventHeader.tagnum = -1 ;
  G__EventDictLN_Event.tagnum = -1 ;
  G__EventDictLN_HistogramManager.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEventDict() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_Track),sizeof(Track),-1,292096,"A track segment",G__setup_memvarTrack,G__setup_memfuncTrack);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_EventHeader),sizeof(EventHeader),-1,263424,(char*)NULL,G__setup_memvarEventHeader,G__setup_memfuncEventHeader);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_Event),sizeof(Event),-1,263424,(char*)NULL,G__setup_memvarEvent,G__setup_memfuncEvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__EventDictLN_HistogramManager),sizeof(HistogramManager),-1,263168,"Manages all histograms",G__setup_memvarHistogramManager,G__setup_memfuncHistogramManager);
}
extern "C" void G__cpp_setupEventDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEventDict()");
  G__set_cpp_environmentEventDict();
  G__cpp_setup_tagtableEventDict();

  G__cpp_setup_inheritanceEventDict();

  G__cpp_setup_typetableEventDict();

  G__cpp_setup_memvarEventDict();

  G__cpp_setup_memfuncEventDict();
  G__cpp_setup_globalEventDict();
  G__cpp_setup_funcEventDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEventDict();
  return;
}
class G__cpp_setup_initEventDict {
  public:
    G__cpp_setup_initEventDict() { G__add_setup_func("EventDict",(G__incsetup)(&G__cpp_setupEventDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEventDict() { G__remove_setup_func("EventDict"); }
};
G__cpp_setup_initEventDict G__cpp_setup_initializerEventDict;

